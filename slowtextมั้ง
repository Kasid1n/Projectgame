#include <iostream>
#include <thread>
#include <conio.h>
#include <ctime>

using namespace std;

bool skipText = false;

void sleep_ms(int milliseconds) {
    clock_t start_time = clock();
    while ((clock() - start_time) * 1000 / CLOCKS_PER_SEC < milliseconds) {
        if (_kbhit()) {
            char key = _getch();
            if (key == ' ') {
                skipText = true;
                return;
            }
        }
    }
}

void print_slowly(const string& text, const int* linePositions, int lineCount, const int* delays, int delayCount) {
    int count = 0;
    int lineIndex = 0;
    int currentLinePos = (lineCount > 0) ? linePositions[0] : 0;
    int currentDelay = (delayCount > 0) ? delays[0] : 100;

    for (const auto& c : text) {
        if (_kbhit()) {
            char key = _getch();
            if (key == ' ') {
                skipText = true;
            }
        }

        cout << c << flush;
        if (!skipText) {
            sleep_ms(currentDelay);
        }

        count++;
        if (lineIndex < lineCount && count >= currentLinePos) {
            cout << '\n';
            count = 0;
            lineIndex++;

            if (lineIndex < lineCount) {
                currentLinePos = linePositions[lineIndex];
            }
            if (lineIndex < delayCount) {
                currentDelay = delays[lineIndex];
            }
        }
    }
    skipText = false;
}

int main() {
    string text = "123456789 1234567890123456789 123456789012345";

    int linePositions[] = {10, 20, 15}; // กำหนดตำแหน่งขึ้นบรรทัดใหม่
    int delays[] = {100, 50, 200}; // กำหนดความเร็วแต่ละบรรทัด (ms)

    int lineCount = sizeof(linePositions) / sizeof(linePositions[0]);
    int delayCount = sizeof(delays) / sizeof(delays[0]);

    print_slowly(text, linePositions, lineCount, delays, delayCount);

    return 0;
} //skip ได้ถ้ากด Space bar
  
